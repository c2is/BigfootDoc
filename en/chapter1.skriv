=== Introduction
Bifgoot is a CMF (Content Management Framework) built on the Symfony 2 framework and Doctrine ORM. It provides a simple and easy extendable back office : each feature can be easily extended by the developer who wants to implement its own needs.

Here is a non comprehensive list of native features :
* users and roles management,
* languages management,
* contexts management,
* external and internal (imports) data streams management,
* content images management (portfolio),
* menus management,
* contents management,
* metadata SEO management.

=== Install synopsis
[[[bash
git clone git@github.com:c2is/Bigfoot.git your_project
cd your_project
curl -sS https://getcomposer.org/installer | php
php composer.phar install
./app/console doctrine:database:create
./app/console doctrine:schema:update --force
./app/console doctrine:fixtures:load
sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/cache/
sudo setfacl -dR -m u:www-data:rwx -m u:`whoami`:rwx app/cache/
sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/logs/
sudo setfacl -dR -m u:www-data:rwx -m u:`whoami`:rwx app/logs/
./app/console bigfoot:theme:install (--symlink)
./app/console assetic:dump --env=admin
./app/console assetic:dump --env=admin_dev
]]]

=== Install detailed
Clone this project
[[[bash
git clone git@github.com:c2is/Bigfoot.git your_project
]]]

Install dependencies using composer:
[[[bash
cd your_project
curl -sS https://getcomposer.org/installer | php
php composer.phar install
]]]

If you didn't set it up during the composer install, setup your database through the Symfony standard distribution configuration web interface:
[[[bash
/app_dev.php/_configurator/step/0
]]]

If you're using a database you didn't previously create, Doctrine can do it for you (this is a safe command you can use even if the database already exists):
[[[bash
./app/console doctrine:database:create
]]]

Load the schema and the fixtures:
[[[bash
./app/console doctrine:schema:update --force
./app/console doctrine:fixtures:load
]]]

Set permissions on cache and logs directories:
[[[bash
sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/cache/
sudo setfacl -dR -m u:www-data:rwx -m u:`whoami`:rwx app/cache/
sudo setfacl -R -m u:www-data:rwx -m u:`whoami`:rwx app/logs/
sudo setfacl -dR -m u:www-data:rwx -m u:`whoami`:rwx app/logs/
]]]

On Macosx rather do this way
[[[bash
sudo chmod -R +a "`whoami` allow delete,write,append,file_inherit,directory_inherit" app/cache/
sudo chmod -R +a "`whoami` allow delete,write,append,file_inherit,directory_inherit" app/logs/
sudo chmod -R +a "_www allow delete,write,append,file_inherit,directory_inherit" app/cache/
sudo chmod -R +a "_www allow delete,write,append,file_inherit,directory_inherit" app/logs/
]]]

Bigfoot assets are not in the usual public/ directory under Resources/ ; they are not installed properly with an assets:install. To install the administration interface assets, please use:
[[[bash
./app/console bigfoot:theme:install (--symlink)
]]]

This command installs bigfoot assets and also executes the usual assets:install command. If executed with the symlink option, assets will be installed via a symbolic link (instead of hard copy), which is recommended during development (no need to assets:install everytime a css / js file is changed).

Bigfoot assets are loaded via Assetic and are gitignored. To have the admin interface display properly in production environment, you first must dump the assets with:
[[[bash
./app/console assetic:dump --env=admin
./app/console assetic:dump --env=admin_dev
]]]
