
=== Contexts
This powerful feature allow you to easily filter data shown to users. Languages management uses this.

==== Define a context
[[[ yaml
# /app/config/bigfoot.yml
bigfoot_context:
    # A list of entities to mark as "can be contextualized".
    # You can add multiple classes at once using a namespace prefix.
    # For example, adding Bigfoot\ means every entity which namespace begins with Bigfoot\ will be contextualizable.
    entities:
        - "Bigfoot\\"
    # A list of contexts.
    # The name used for each context is relevant and will be used to identify a context.
    contexts:
        language:
            # A list of context loaders that will be called successively, in the order they appear in the configuration, to determine what is the current context during the navigation.
            loaders:
                back:       "bigfoot_language_loader"
            # A list of label / value representing each individual context.
            values:
                fr:
                    label:  "French"
                    value:  "fr"
                en:
                    label:  "English"
                    value:  "en"
            # The default value for this context.
            default_value:  %locale%
            # String representation for the context.
            label:          "Language"
]]]

An other way exists to define "contextualized" entities : with annotation.
==== Define "contextualized" entities with annotation

[[[php
# /src/Sandbox/MovieBundle/Entity/Movie.php
use Bigfoot\Bundle\CoreBundle\Annotation\Bigfoot;
/**
 * Movie
 *
 * @ORM\Table(name="sandbox_movie")
 * @ORM\Entity(repositoryClass="Sandbox\MovieBundle\Entity\MovieRepository")
 * @Bigfoot\Context({"distributor"})
 */
class Movie
{...}
]]]
==== Context loaders
Context loaders must be placed in the ContextLoaders/ folder in your bundle.
They must extend Bigfoot\Bundle\ContextBundle\Model\AbstractContextLoader and implement the methods getContextName() (returns a string corresponding to the name of one of the contexts in the bundle configuration) and getValue() (returns the current value for the context).
If a context loader returns a false equivalent value, the next loader will be called, until all loaders have been called. If no context value is found, the default_value set in the bundle configuration for that context will be used.

Example : a context loader which compute the context value from the current subdomain.
[[[php
#/src/Sandbox/DistributorBundle/Loader/DistributorLoader.php
namespace Sandbox\DistributorBundle\Loader;
use Bigfoot\Bundle\ContextBundle\Loader\AbstractLoader;

/**
 * Class LanguageLoader
 * @package Bigfoot\Bundle\ContextBundle\ContextLoader
 */
class DistributorLoader extends AbstractLoader
{
    /**
     * @return mixed
     */
    public function getValue()
    {
        $domain            = $this->getRequest()->getHttpHost();
        $values            = explode(".", $domain);
        $distributor       = array_shift($values);
        $distributorValues = $this->getValueForKey($distributor);

        return $distributorValues;
    }

    /**
     * @return string
     */
    public function getContextName()
    {
        return 'distributor';
    }
}
]]]

=== General
==== Generating CRUD in Bigfoot
* Have an existing doctrine entity (in the Entity/ folder in a Bundle) by creating it yourself or using the generate:doctrine:entity command
* use generate:bigfoot:crud. It works exactly like doctrine:generate:crud (It actually extends that command and uses its own templates to generate files)
* A controller extending Bigfoot\Bundle\CoreBundle\Crud\CrudController will be generated in the Controller/ folder of your bundle. A FormType for your entity will also be generated if not existing.
* The routing isn't generated! You need to add the newly created Controller in your relevent routing configuration file(s) (usually will be app/config/routing_admin.yml)
* The menu isn't generated (yet?)! Your form and controller are generated and you edited your routing configuration and it all works if you type in the URL directly. But you need to add a menu to your CRUD screens to the Bigfoot administration interface menu.

==== Adding a menu in Bigfoot
Menu items in Bigfoot are added by Listeners. It allows any Bundle to register its own menu items  that will aggregate with other items added by other bundles.
* Create a Listener :
** Listeners must be located in a Listener/ folder in your bundle and listen on the "bigfoot.menu.generate" event.
** This event uses the Bigfoot\Bundle\CoreBundle\Event\MenuEvent class to provide the menu to the listener.
** The event is thrown by Bigfoot everytime it instanciates a menu somewhere. Simply adding your item on the given menu will add it on every menu in the administration interface. To add your item only to a specific menu, you must test the menu name.
** On your standard, v0 Bigfoot interface, menus used are :
*** sidebar_menu: The main menu located in the left sidebar.
*** toolbar_menu: The menu located in the toolbar, used to display user informations and user settings links.
*** actions_menu: Menu used in listings to allow for custom actions on the current list (add item, export ...)

Example :
[[[ php
#Acme/Bundle/MyBundle/Listener/MenuListener.php
	namespace Acme\BundleMyBundle\Listener;
	
	use Bigfoot\Bundle\CoreBundle\Event\MenuEvent;
	use Bigfoot\Bundle\CoreBundle\Theme\Menu\Item;
	
	class MenuListener
	{
	    /**
	     * @param MenuEvent $event
	     */
	    public function onMenuGenerate(MenuEvent $event)
	    {
	        $menu = $event->getMenu();
	        if ('sidebar_menu' == $menu->getName()) {
	            $navigation = new Item('sidebar_mymenu', 'My menu');
	            $navigation->addChild(new Item('sidebar_mymenu_mysubmenu', 'My submenu', 'my_route'));
	            $menu->addItem($navigation);
	        }
	    }
	}
]]]

Acme/Bundle/MyBundle/Resources/config/services.yml
[[[ yaml	
	kernel.listener.my_menu_listener:
	        class: Acme/Bundle/MyBundle/Listener/MenuListener
	        tags:
	            - { name: kernel.event_listener, event: bigfoot.menu.generate, method: onMenuGenerate }
]]]

==== Store translations in database
You can persist Bigfoot\Bundle\CoreBundle\Entity\TranslatableLabel entities and have them available as translations in Symfony 2 :
* TranslatableLabel->domain : The domain for this label (defaults to "messages").
* TranslatableLabel->locale : The locale for this label.
* TranslatableLabel->name : Identifier of the label - eg a label named "homepage.title" will be matched when using 
[[[twig 
{{ 'homepage.title' | trans }} 
]]] in a twig template.
* TranslatableLabel->value : The translated value to display.

For it to work, you must add translation files into your app/Resources/translations directory named "<domain>.<locale>.db", eg : messages.en.db or Symfony 2 won't load your translations.